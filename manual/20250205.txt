    4-3. 포지셔닝 :
        HTML로 만든 웹페이지는 하나의 기기로만 여는 것이 아니라, 위치값이 상대적이다.
        상대적인 요소를 잡는데 포지셔닝이 중요한 역할을 한다.

        1. position 속성 :
            https://showcases.yalco.kr/html-css/02-09/01.html 참조

            사이트 내부를 확인했을 때
            커다란 div(class=container) 내에 8개의 회색 div와
            오렌지색 div(class=orange)가 있고, 오렌지색 div 내부에 더 작은 div(class=red)가 있다.

            orange / red를 움직이면서 position 개념을 학습 예정.

            position 속성의 경우 HTML 요소들이 해당 페이지에서 어떻게 배치될지를 지정한다.
                -> 중요한점 - 부모 요소의 속성이 자식에 상속되지 않는다.
                (font-size와 같은 것들은 자식에게 em이라는 상대값 형태로 상속이 되었다.)

                1) static - top 30px left 30px을 입력하더라도, 페이지 상에 변화가 없다.
                즉, static의 경우에는 원래 존재하는 페이지의 요소대로 따르기 때문에 위치 속성
                지정을 하더라도 소용이 없다. -> 말 그대로 static(정적)인 상태.

                2) relative - 원래 있던 위치를 기준으로 top / left / right 등의 속성값이 유지된다.
                -> 요소 위치는 이동하는데 공백 위치는 그대로 유지된다. 회색 상자들은 안움직인다.

                3) absolute - position 속성에서 static이 아닌 첫 부모 요소를 기준으로 한다.
                이후 top, bottom, left, right, z-index 속성값을 이용하여 위치 조정이 가능하다.
                첫 부모 -> 가장 바깥쪽 태그가 아니라, position: absolute를 표기한 태그(div 같은)의 바로 윗단계
                (위 사이트에서 부모 요소는, class=container로 되어 있는 사각형 9개를 포함하고 있는 가장 바깥쪽 테두리.)
                (회색 상자들이 움직이면서 순서가 바뀌는 것도 볼 수가 있다.)

                참고 - position 속성의 default 값은 static이다.

                특징 - 자리를 차지하지 않는다. 위 사이트 기준, 다른 거 다 지운 상태로 position만 absolute를 적용했을 경우,
                회색 사각형이 하나 사라지는 것처럼 보이는 이유는 실제로 사라진 것이 아니라, 오렌지 div태그에 겹쳐진 상태로
                회색 사각형이 하나 있는 상태로 봐야 한다.

                -> 한칸씩 밀려 들어와 있다 -> 그래서 눈에 보이는 사각형이 8개밖에 없다.
            
                4) fixed - 항상 부모 요소가 아니라 뷰포트 (viewport)를 기준으로 한다.
                특징 : 스크롤을 내려도 화면에 보이는 위치가 고정된다.
                    특정 요소들의 경우에는

                5) sticky - 어떤 요소가 스크롤로 이동할 수 있는 공간을 top, bottom, left, right z-order로 지정.
                (fixed와 달리 어느순간 스크롤로 내려가다가 stop된다.)
                특징:
                    부모 요소의 여백 등에도 영향을 받는다.
                    자식 요소의 위치를 고정(red div) 해도 부모 요소의 위치 (orange div)를 벗어나면, 자식 요소는
                    더 이상 움직일 수 없기 때문에 sticky는 부모 요소의 안쪽이 아닌 동등하거나 바같쪽 요소에 지정하는 편이 낫다.

                6) z-index 속성 :
                    x축 / y축 / z축에서 z축 관련 부분 (포토샵의 레이어 같은 느낌.)
                    default 값은 auto인데 0으로 되어 있다.

                    참고 - https://showcases.yalco.kr/html-css/02-09/02.html

                    (n3zindex.html css 참조)

5. Flex Layout :
    모든 웹사이트는 커다란 레이아웃 형태로 되어있고, 이를 마드는 방식이 다양하다.
    예전에는 HTML과 블록 요소만 이용해서 레이아웃을 작성했으나, Flex의 등장 이후 CSS 기능을 적용하여 작성할 수 있게 되었다.\

    참조 사이트 - https://showcases.yalco.kr/html-css/02-11/01.html

    부모에 적용하게 되는 Flex / 자식에 적용하게 되는 Flex가 나뉘어 있다.
    
    참조 사이트 기준으로 회색 div은 부모 요소 / 보라색 div는 자식 요소 3개가 있다.
    div 태그이기 때문에 display가 block으로 default로 적용되어 있다.

    min-width: 48px; min-height: 48px;로 설정되어 있다.

    1. display: flex; -> 세로 배치
    2. display: inline-flex; -> 부모 div를 inline-block

    해당 부모 요소를 블록으로 두는게 flex, 인라인으로 만드는게 inline-flex

    1) flex-direction 속성: 
        row - 내부 요소를 왼쪽부터 차례로 정렬 (메인 축이 x축이라 가로로 배치)
        row-reverse - 내부 요소를 오른쪽부터 차례로 정렬
        column - 내부 요소를 위에서부터 차례로 정렬 (y축을 따라 내려오니까)
        column-reverse - 내부 요소를 아래에서부터 차례로 정렬

        reverse를 적용하면 HTML 상으로는 div의 순서가 바뀌지 않지만, 웹 페이지 상에서의 눈으로 보는 순서가 뒤바뀜.

        flex-direction 속성에서 축의 방향을 어떻게 지정하느냐에 따라 달린 속성 :
        (1) justify-content :
            메인 축에서 내부 요소를 정렬하는 방식 (가운데 정렬 같은 거)
            flex-start - 시작지점에서부터 정렬
            flex-end - 끝부터 정렬
            center - 가운데 정렬
            space-between - 내부의 양쪽 요소를 처음과 끝 부분으로 보낸다. 그 중간값에 가운데를 배치한다.
                cf) justify-content에서 start나 end로 쓰더라도 상관은 없지만, reverse를 시킬 때 오류가 발생 수 있어서,
                flex-start/flex-end를 생활화 하는 것이 좋다.
            space-around - 각 내부 요소의 양쪽에 일정한 크기의 빈 공간을 배치한다.
            (1 (1) 2 (2) 2 (3) 1)
            space-evenly - 모든 빈 공간을 균일하게 배치함.
            (1.5 (1) 1.5 (2) 1.5 (3) 1.5)
            -> flex-directiond을 row로 배치해서 확인했는데, column 기준 등으로는 직접 확인해보기.
        
        (2) align-items:
            flex의 보조 축(row축 기준으로 얘기하고 있기 때문. 메인 축이 아닌 축을 의미한다.)에서 내부 요소를 정렬하는 방식.
            -> default로 stretch로 지정되어 있다.
                stretch - 보조 축 방향을 채워준다.
                flex-start - 보조 축의 상단으로 내부 요소를 갖다 붙인다. (row라면 y축 상단으로.)
                flex-end - 보조 축의 하단으로 내부 요소를 갖다 붙인다. (row라면 y축 하단으로.)
                center - 그냥 보조축 기준 가운데 정렬.

        flex 레이아웃의 경우 컨테이너 안에 있는 내부 요소 (자식 요소)를 어느 방향으로 배치하느냐에 따라서
        flex-direciton / justify-content / align-items를 셋 다 조합해서 쓰는 경우가 많다.

        (3) align-content: 나중에 한꺼번에 설명할 예정.

        여기서부터는 부모 요소의 영역을 넘어갈 정도로 많은 배치 방식
        (4) flex-wrap: 자식 요소가 부모 요소를 넘어가지 않도록 줄바꿈한다.
        -> 보통의 경우에는 컨텐츠가 한 줄이 아니라 여러 줄일 때 적용하는 편이다.

            flex-wrap: wrap;인 상태에서,
                align-items vs align-content의 차이
                (아이템 정렬 vs 내용 정렬?)

                align-items : flex-start / center / flex-end로 지정했을 경우 각각
                    가운데 여백(각 줄의 여백)이 같은 크기의 공백으로 나뉘어진 상태에서 내부 요소가 위쪽, 가운데, 아래쪽을 기준으로 정렬.
                align-content: flex-start/ center / flex-end로 지정했을 경우 각각
                    내부 요소 전체가 "공백이 없이" 위쪽, 가운데, 아래로 붙어 정렬된다.
                    space-between / space-around / space-evenly 속성이 있어 justify-content 속성과 비교 가능.
                    -> 간격 조절 용도.
                gap: 내부 요소들 사이에 들어가는 공백의 크기 저장 -> 단위는 em.

    2) 자식 요소에 적용하는 flex
    참조 사이트 - https://showcases.yalco.kr/html-css/02-11/02.html

    flex-basis: 메인 축의 길이(flex-direction이 row면 x축, column이면 y축)
    flex-grow: 빈 공간을 채울지 여부, 그리고 채울 시 다른 아이템들의 동 속성값에 비례해서 공백을 나눠갖는다. 기본값은 0이다.
    flex-shrink: 전체 공간이 부족할 때, 해당 아이템의 길이가 컨텐츠의 너비 또는 flex-basis로 지정한 값보다 작아질 수 있을지를
        지정한다. 기본값은 1이며, 증가할수록 길이가 많이 줄어든다.
    
    flex 레이아웃을 지정할 때는 flex-basis/grow/shrink와 같이 속성값을 하나하나 지정할 수 있는데,
    flex 내의 여러 개의 값을 작성해서 CSS 코드 한줄짜리로 만들기도 한다.

    (예시)
    flex: (flex-grow 값);
    flex: (flex-grow 값) (flex-basis 값);
    flex: (flex-grow 값) (flex-shrink 값) (flex-basis 값);
    
    3) order : 부모 컨테이너 안에서 여러 개의 자식 요소들이 있을 때 순서를 임의로 바꿀 수 있다.
    (우선순위를 정하는 속성 느낌.)

    참고 사이트 - https://showcases.yalco.kr/html-css/02-11/04.html

    (Chapter 9 폴더의 n1flex.html, n1flex.css 참조)

    4) 요소를 감추는 방법들:
        웹 페이지 내에서는 필요에 따라서 특정 요소를 보이게끔 / 보이지 않게끔 조절할 필요가 있음.
        a. 원래 보이던 요소를 투명하게 바꾸는 것
        b. 요소가 안보이면서 + 적용 기능을 없애는 것.

        1. CSS에서 요소를 숨기는 방법.
        opacity 속성 -  0으로 하면 모습만 감춘다. 스크린 리더에 따라 읽지 않을 수도 있습니다. 값은 0~1까지 있다.

        visibility 속성 - hidden으로 하면 위 효과에 더하여, 마우스 오버 효과나 포커스, 클릭 등도 무효하게 됩니다.
        스크린 리더에게도 읽히지 않게 된다. (보이는건 visible)

        display 속성 - inline / inline-block으로 지정 시,
        display: none으로 하면 위 효과들에 더하여 자리도 차지하지 않게 된다.
        아예 흔적 자체를 날려버리기 때문에 기존의 기능도 당연히 쓰이지 않게 된다.

        참고 사이트 - https://showcases.yalco.kr/html-css/02-10/02.html

        2. 마우스 커서 모양 바꾸기
        
        (n2invisible.html, css 참조)

    20250206 -> BEM 관련 / 쿼리 관련 (@관련) 수업 예정